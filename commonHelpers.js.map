{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate;\nlet intervalId = null;\nconst btnRef = document.querySelector('button[data-start]');\nbtnRef.disabled = true;\n\nconst valueArray = document.querySelectorAll(`.value`);\nbtnRef.addEventListener('click', handleStartTimer);\n\nconst fp = flatpickr('#datetime-picker', {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate - new Date() < 0) {\n      btnRef.disabled = true;\n      btnRef.classList.remove('active-btn');\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        class: 'toast',\n        position: 'topRight',\n        iconUrl: './img/left-close.svg',\n        titleColor: 'white',\n        messageColor: 'white',\n        timeout: false,\n        backgroundColor: '#EF4040',\n      });\n    } else {\n      btnRef.disabled = false;\n      btnRef.classList.add('active-btn');\n    }\n  },\n});\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n\nfunction handleStartTimer() {\n  btnRef.disabled = true;\n  btnRef.classList.remove('active-btn');\n  intervalId = setInterval(() => {\n    const startTime = Date.now();\n    const differ = userSelectedDate - startTime;\n\n    if (differ < 1000) {\n      clearInterval(intervalId);\n    }\n    const convertedTime = convertMs(differ);\n\n    valueArray[0].textContent = addLeadingZero(convertedTime.days);\n    valueArray[1].textContent = addLeadingZero(convertedTime.hours);\n    valueArray[2].textContent = addLeadingZero(convertedTime.minutes);\n    valueArray[3].textContent = addLeadingZero(convertedTime.seconds);\n  }, 1000);\n}\n"],"names":["userSelectedDate","intervalId","btnRef","valueArray","handleStartTimer","flatpickr","selectedDates","iziToast","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","startTime","differ","convertedTime"],"mappings":"0FAKA,IAAIA,EACAC,EAAa,KACjB,MAAMC,EAAS,SAAS,cAAc,oBAAoB,EAC1DA,EAAO,SAAW,GAElB,MAAMC,EAAa,SAAS,iBAAiB,QAAQ,EACrDD,EAAO,iBAAiB,QAASE,CAAgB,EAEtCC,EAAU,mBAAoB,CACvC,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,EAAE,EAC5BN,EAAmBM,EAAc,GAC7BN,EAAmB,IAAI,KAAS,GAClCE,EAAO,SAAW,GAClBA,EAAO,UAAU,OAAO,YAAY,EACpCK,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,MAAO,QACP,SAAU,WACV,QAAS,uBACT,WAAY,QACZ,aAAc,QACd,QAAS,GACT,gBAAiB,SACzB,CAAO,IAEDL,EAAO,SAAW,GAClBA,EAAO,UAAU,IAAI,YAAY,EAEpC,CACH,CAAC,EACD,SAASM,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CACA,SAASC,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CAEA,SAASX,GAAmB,CAC1BF,EAAO,SAAW,GAClBA,EAAO,UAAU,OAAO,YAAY,EACpCD,EAAa,YAAY,IAAM,CAC7B,MAAMe,EAAY,KAAK,MACjBC,EAASjB,EAAmBgB,EAE9BC,EAAS,KACX,cAAchB,CAAU,EAE1B,MAAMiB,EAAgBV,EAAUS,CAAM,EAEtCd,EAAW,GAAG,YAAcW,EAAeI,EAAc,IAAI,EAC7Df,EAAW,GAAG,YAAcW,EAAeI,EAAc,KAAK,EAC9Df,EAAW,GAAG,YAAcW,EAAeI,EAAc,OAAO,EAChEf,EAAW,GAAG,YAAcW,EAAeI,EAAc,OAAO,CACjE,EAAE,GAAI,CACT"}